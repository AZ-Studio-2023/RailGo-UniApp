<template>
	<view 
	class="ux-flex ux-row ux-nowrap ux-align-items-center" 
	v-if="show && timer != ''">
		<text 
		:class="customClass" 
		class="ux-countdown-numbers ux-border" 
		:style="{
			padding: padding + 'rpx ' + padding*1.3 + 'rpx ',
			borderColor:borderColor, 
			marginRight:spacing, 
			fontSize:size+'rpx', 
			borderRadius:borderRadius
		}" 
		v-if="(d != '00' || zeroShow)">{{d}}</text>
		<text 
		class="ux-countdown-splitor" 
		:class="splitorClass" 
		:style="{
			fontSize:size+'rpx', 
			marginRight:spacing}" 
		v-if="(d != '00' || zeroShow)">{{splitorText[0]}}</text>
		<text 
		:class="customClass" 
		class="ux-countdown-numbers ux-border" 
		:style="{
			padding: padding + 'rpx ' + padding*1.3 + 'rpx ',
			borderColor:borderColor, 
			marginRight:spacing, 
			fontSize:size+'rpx',
			borderRadius:borderRadius
		}" 
		v-if="(h != '00' || zeroShow)">{{h}}</text>
		<text 
		:class="splitorClass" 
		class="ux-countdown-splitor" 
		:style="{
			fontSize:size+'rpx', 
			marginRight:spacing
		}" 
		v-if="(h != '00' || zeroShow)">{{splitorText[1]}}</text>
		<text 
		:class="customClass" 
		class="ux-countdown-numbers ux-border" 
		:style="{
			padding: padding + 'rpx ' + padding*1.3 + 'rpx ',
			borderColor:borderColor, 
			marginRight:spacing, 
			fontSize:size+'rpx',
			borderRadius:borderRadius
		}">{{i}}</text>
		<text 
		:class="splitorClass" 
		class="ux-countdown-splitor" 
		:style="{
			fontSize:size+'rpx', 
			marginRight:spacing,
		}">{{splitorText[2]}}</text>
		<text 
		:class="customClass" 
		class="ux-countdown-numbers ux-border" 
		:style="{
			padding: padding + 'rpx ' + padding*1.3 + 'rpx ',
			borderColor:borderColor, 
			marginRight:spacing, 
			fontSize:size+'rpx',
			borderRadius:borderRadius
		}">{{s}}</text>
		<text 
		:class="splitorClass" 
		class="ux-countdown-splitor" 
		:style="{
			fontSize:size+'rpx',
		}">{{splitorText[3]}}</text>
	</view>
</template>
<script>
export default {
	name  : "ux-count-down",
	props : {
		size          : { type : Number,  default : 26},
		timer         : { type : String,  default : "" },
		splitorText   : { 
			type : Array as PropType<Array<string>>, 
			default : function():string[]{
				return ['天', '时', '分', '秒'] as string[]
			}
		},
		show          : { type : Boolean, default : true},
		zeroShow      : { type : Boolean, default : true},
		spacing       : { type : String,  default : '0rpx'},
		customClass   : { 
			type : Array as PropType<Array<string>>, 
			default : function():string[]{
				return  ['ux-primary-text'] as string[];
			}
		},
		splitorClass  : { 
			type : Array as PropType<Array<string>>, 
			default : function():string[]{
				return ['ux-primary-text'] as string[];
			}
		},
		borderColor   : { type : String,  default : 'rgba(255,255,255,0)'},
		padding       : { type : Number,  default : 5},
		borderRadius  : { type : String,  default : "8rpx" },
	},
	data() {
		return {
			d           : "",
			h           : "",
			i           : "",
			s           : "",
			leftTime    : 0,
			outTimer    : -1,
			timerIn     : '',
			leftTimeNum : 0
		}
	},
	created : function(){
		this.timerIn = this.timer;
		this.runbase();
	},
	watch   : {
		timer : function(){
			this.timerIn = this.timer;
			this.runbase();
		}
	},
	methods : {
		runbase : function():boolean{
			var reg = /^([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/;
			var res = this.timerIn.match(reg);
			if(res == null){
				return false;
			}
			if (res.length < 3){ return false;}
			var yearString = res[1]??"2024";
			var year = parseInt(yearString);
			if (year < 1000) { return false; }
			var monthString = res[2]??"01";
			var month = parseInt(monthString);
			var dayString = res[3]??"01"
			var day = parseInt(dayString);
			var hString = res[4]??"00";
			var h = parseInt(hString);
			if (h < 0 || h > 24) { return false; }
			var iString = res[5]??"00";
			var i = parseInt(iString);
			if (i < 0 || i > 60) { return false; }
			var sString = res[5]??"00";
			var s = parseInt(sString);
			if (s < 0 || s > 60) { return false; }
			var leftTime = new Date(year, month - 1, day, h, i, s).getTime();
			this.leftTime = leftTime;
			clearTimeout(this.outTimer);
			this.countDown();
			return true;
		},
		countDown: function (){
			var leftTime     = this.leftTime - new Date().getTime();
			this.leftTimeNum = leftTime;
			if (leftTime > 0) {
				var day     = Math.floor(leftTime / (1000 * 60 * 60 * 24));
				var dayString = day.toString();
				var hours   = Math.floor((leftTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
				var hoursString = hours.toString();
				var minutes = Math.floor((leftTime % (1000 * 60 * 60)) / (1000 * 60));
				var minutesString = minutes.toString();
				var seconds = Math.floor((leftTime % (1000 * 60)) / 1000);
				var secondsString = seconds.toString();
				if (day     < 10) { dayString     = '0' + day; }
				if (hours   < 10) { hoursString   = '0' + hours; }
				if (minutes < 10) { minutesString = '0' + minutes; }
				if (seconds < 10) { secondsString = '0' + seconds; }
				this.h = hoursString; 
				this.i = minutesString; 
				this.s = secondsString; 
				this.d = dayString;
				this.outTimer = setTimeout(()=>{this.countDown();}, 1000);
			}else{
				clearTimeout(this.outTimer);
				this.h = '00'; 
				this.i = '00'; 
				this.s = '00'; 
				this.d = '00';
				this.$emit('endDo');
			}
		},
		reSetTimer : function(timer:string){
			clearTimeout(this.outTimer);
			this.timerIn = timer;
			this.runbase();
		},
		getTimeRemaining : function():number{
			if(this.leftTimeNum < 0){return 0;}
			return Math.floor(this.leftTimeNum / 1000);
		}
	},
	emits : ['endDo']
}
</script>
<style scoped>
.ux-countdown-splitor{padding:0 5rpx;} 
.ux-countdown-numbers{text-align:center;}
</style>